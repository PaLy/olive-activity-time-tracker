import{n as s,d as a,p as c,q as l,r as v,s as u,M as d}from"./index-DE89N4ny.js";const m=s((t,e)=>({isDeleteIntervalConfirmationOpen:()=>!!e().deleteIntervalConfirmationData,closeDeleteIntervalConfirmation:()=>t({deleteIntervalConfirmationData:void 0}),openDeleteIntervalConfirmation:n=>t({deleteIntervalConfirmationData:{intervalId:n}})}));async function I(t){return a.transaction("r",a.activities,a.intervals,async()=>{const e=await a.intervals.get(t);if(!e)throw new Error(`Interval with ID ${t} does not exist.`);const n=await a.activities.get(e.activityId);if(!n)throw new Error(`Activity with ID ${e.activityId} does not exist.`);return{activityFullName:await c(n),interval:e}})}async function y(t,e,n){return a.transaction("rw",a.intervals,async()=>{if(e>=n)throw new Error("Start time must be less than end time.");if(!await a.intervals.update(t,{start:e,end:n}))throw new Error(`Interval with ID ${t} does not exist.`)})}async function D(t){return a.transaction("rw",a.intervals,async()=>{if(!await a.intervals.get(t))throw new Error(`Interval with ID ${t} does not exist.`);await a.intervals.delete(t)})}const h=(t,e,n)=>{const i=l(r=>r.time);return v.useMemo(()=>{const r=e===d,o=(r?+i:e)-t;return u(o,r||n)},[n,t,e,i])};export{h as a,y as b,D as d,I as g,m as u};
//# sourceMappingURL=hooks-DnkQxRD8.js.map
